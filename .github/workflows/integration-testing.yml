name: Integration Testing

on:
  push:
    branches: [ "staging" ]  # Run on pushes to staging
  pull_request:
    branches: [ "staging" ]  # Run on PRs targeting staging
  workflow_dispatch:  # Allow manual triggers
    inputs:
      test_category:
        description: 'Specific integration test category to run'
        required: false
        default: 'all'
        type: choice
        options:
          - all
          - pubsub_message_testing
          - service_chain_testing
          - file_management_testing
          - externalAPI_testing

env:
  PYTHON_VERSION: "3.11"

jobs:
  integration-tests:
    name: Run Integration Tests
    runs-on: ubuntu-latest
    timeout-minutes: 30
    
    strategy:
      fail-fast: false
      matrix:
        test-category: 
          - pubsub_message_testing
          - service_chain_testing
          - file_management_testing
          - externalAPI_testing
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}
      
      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ secrets.GCP_PROJECT_ID }}
          
      - name: Cache pip dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-integration-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-integration-
            ${{ runner.os }}-pip-
            
      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y ffmpeg
          
      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          
      - name: Set up test environment variables
        run: |
          echo "TESTING=true" >> $GITHUB_ENV
          echo "ENVIRONMENT=integration_test" >> $GITHUB_ENV
          echo "INTEGRATION_TEST=true" >> $GITHUB_ENV
          
      - name: Run specific integration test category
        if: github.event.inputs.test_category != 'all' && github.event.inputs.test_category == matrix.test-category
        run: |
          pytest tests/int_testing/${{ matrix.test-category }}/ -v --tb=short --maxfail=3 --durations=10
        env:
          # Use test/mock credentials for most tests
          SUPABASE_URL: ${{ secrets.SUPABASE_URL || 'https://test.supabase.co' }}
          SUPABASE_KEY: ${{ secrets.SUPABASE_KEY || 'test_key' }}
          # External API tests - use real keys if available, skip if not
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          AZURE_SPEECH_KEY: ${{ secrets.AZURE_SPEECH_KEY }}
          AZURE_SPEECH_REGION: ${{ secrets.AZURE_SPEECH_REGION }}
          ASSEMBLYAI_API_KEY: ${{ secrets.ASSEMBLYAI_API_KEY }}
          # Google Cloud for Pub/Sub tests
          GOOGLE_CLOUD_PROJECT: ${{ secrets.GCP_PROJECT_ID }}
          
      - name: Run all integration tests
        if: github.event.inputs.test_category == 'all' || github.event.inputs.test_category == ''
        run: |
          pytest tests/int_testing/${{ matrix.test-category }}/ -v --tb=short --maxfail=3 --durations=10
        env:
          # Use test/mock credentials for most tests
          SUPABASE_URL: ${{ secrets.SUPABASE_URL || 'https://test.supabase.co' }}
          SUPABASE_KEY: ${{ secrets.SUPABASE_KEY || 'test_key' }}
          # External API tests - use real keys if available, skip if not
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          AZURE_SPEECH_KEY: ${{ secrets.AZURE_SPEECH_KEY }}
          AZURE_SPEECH_REGION: ${{ secrets.AZURE_SPEECH_REGION }}
          ASSEMBLYAI_API_KEY: ${{ secrets.ASSEMBLYAI_API_KEY }}
          # Google Cloud for Pub/Sub tests
          GOOGLE_CLOUD_PROJECT: ${{ secrets.GCP_PROJECT_ID }}
          
      - name: Upload test artifacts
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: integration-test-results-${{ matrix.test-category }}
          path: |
            pytest-results.xml
            test-logs/
            temp-test-files/
          retention-days: 7
          
  integration-summary:
    name: Integration Test Summary
    runs-on: ubuntu-latest
    needs: integration-tests
    if: always()
    
    steps:
      - name: Download all test artifacts
        uses: actions/download-artifact@v3
        
      - name: Create test summary
        run: |
          echo "# 🔧 Integration Test Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## Test Results by Category" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Check results for each test category
          categories=("pubsub_message_testing" "service_chain_testing" "file_management_testing" "externalAPI_testing")
          
          for category in "${categories[@]}"; do
            if [ "${{ needs.integration-tests.result }}" == "success" ]; then
              echo "✅ **${category}**: Passed" >> $GITHUB_STEP_SUMMARY
            else
              echo "❌ **${category}**: Failed" >> $GITHUB_STEP_SUMMARY
            fi
          done
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## 📊 Test Coverage Areas" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- **Pub/Sub Message Testing**: Message coordination and state management" >> $GITHUB_STEP_SUMMARY
          echo "- **Service Chain Testing**: Multi-service workflows and dependencies" >> $GITHUB_STEP_SUMMARY
          echo "- **File Management Testing**: Storage, conversion, and lifecycle management" >> $GITHUB_STEP_SUMMARY
          echo "- **External API Testing**: Third-party service integration" >> $GITHUB_STEP_SUMMARY
          
      - name: Notify on failure
        if: needs.integration-tests.result == 'failure'
        uses: actions/github-script@v6
        with:
          script: |
            const title = '🚨 Integration Tests Failed';
            const body = `
            Integration tests failed on branch \`${context.ref.replace('refs/heads/', '')}\`.
            
            **Commit:** ${context.sha.substring(0, 7)}
            **Workflow:** [View Details](${context.payload.repository.html_url}/actions/runs/${context.runId})
            
            Please check the workflow logs for detailed error information.
            `;
            
            // Create an issue for failed integration tests
            github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: title,
              body: body,
              labels: ['bug', 'integration-test-failure', 'ci/cd']
            }); 